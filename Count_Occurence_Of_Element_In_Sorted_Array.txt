int findFirstOccur(vector<int> &arr, int x, int start, int end){
	
	int first = 0;
	while(start <= end){
		int mid = start + (end-start)/2;

		if(arr[mid] == x){
			first = mid;
			end = mid-1;
		}

		else if(arr[mid] > x){
			end = mid-1;
		}

		else{
			start = mid+1;
		}
	}
	return first;
}

int findLastOccur(vector<int> &arr, int x, int start, int end){
	int last = 0;
	while(start <= end){
		int mid = start + (end-start)/2;

		if(arr[mid] == x){
			last = mid;
			start = mid+1;
		}

		else if(arr[mid] > x){
			end = mid-1;
		}
		else{
			start = mid+1;
		}
	}
	return last;
}

int count(vector<int>& arr, int n, int x) {
	if(arr.size()==0)
		return 0;

	if(arr.size()==1){
		if(arr[0] == x)
			return 1;
		return 0;
	}

	int first = findFirstOccur(arr, x, 0, n-1);
	int last = findLastOccur(arr, x, 0, n-1);
	if(first == 0 && last == 0)
		return 0;
	return last - first + 1;
}


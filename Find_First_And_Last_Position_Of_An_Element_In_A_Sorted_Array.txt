class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> result;
        int floor = getFloorOfAnElement(nums,target);
        if(floor == -1){
            result.push_back(-1);
            result.push_back(-1);
            return result;
        }

        int ceil = getCeilOfAnElement(nums, target);
        result.push_back(floor);
        result.push_back(ceil);
        return result;
    }


    int getFloorOfAnElement(vector<int> &nums, int target){
        int start = 0;
        int end = nums.size()-1;
        int floor = INT_MAX;
        while(start <= end){
            int mid = start + (end-start)/2;

            if(nums[mid] == target){
                if(mid < floor){
                    floor = mid;
                    end = mid-1;
                }
            }
            else if(nums[mid] < target){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        if(floor != INT_MAX)
            return floor;
        return -1;
    }

    int getCeilOfAnElement(vector<int> &nums, int target){
        int start = 0;
        int end = nums.size()-1;

        int ceil = INT_MIN;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(nums[mid] == target){
                if(ceil < mid){
                    ceil = mid;
                    start = mid+1;
                }
            }
            else if(nums[mid] > target){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return ceil;
    }

   
};

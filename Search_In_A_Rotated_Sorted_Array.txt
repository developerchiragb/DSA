class Solution {
public:
    int binarySearch(vector<int> &nums, int target, int start, int end){
        
        while(start <= end){
            int mid = start + (end-start)/2;

            if(nums[mid] == target)
                return mid;
            else if(nums[mid] > target)
                end = mid-1;
            else
                start = mid+1;
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size()-1;
        int minElementIndex = 0;
        while(start <= end){
            int mid = start + (end-start)/2;
            int leftMid = (mid+nums.size()-1)%nums.size();
            int rightMid = (mid+1)%nums.size();

            if((nums[mid] <= nums[leftMid]) && (nums[mid] <= nums[rightMid])){
                minElementIndex = mid;
                break;
            }

            else if((nums[start] <= nums[mid]) && (nums[start] > nums[end]))
                start = mid+1;
            else
                end = mid-1;
        }
        int leftPartSearchResult = binarySearch(nums, target, 0, minElementIndex-1);
        if(leftPartSearchResult != -1)
            return leftPartSearchResult;
        
        int rightPartSearchResult = binarySearch(nums, target, minElementIndex, nums.size()-1);
        if(rightPartSearchResult != -1)
            return rightPartSearchResult;
        return -1;
    }
};

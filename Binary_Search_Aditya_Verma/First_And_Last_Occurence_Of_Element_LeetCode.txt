class Solution {
public:

    int findFirstOccur(vector<int> &nums, int target, int start, int end){

        int first = -1;
        while(start <= end){
            int mid = start + ((end-start)/2);
            if(nums[mid] == target){
                first = mid;
                end = mid-1;
            }

            else if(nums[mid] > target){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return first;
    }

    int findLastOccur(vector<int> &nums, int target, int start, int end){
        int last = -1;
        while(start <= end){
            int mid = start + ((end-start)/2);
            if(nums[mid] == target){
                last = mid;
                start = mid+1;
            }

            else if (nums[mid] > target){
                end = mid-1;
            }

            else{
                start = mid+1;
            }
        }

        return last;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        
        int start = 0;
        int end = nums.size()-1;
        int firstOccurence = -1;
        int lastOccurence = -1;
        vector<int> result;
        result.push_back(firstOccurence);
        result.push_back(lastOccurence);
        if(nums.size() == 0)
        {
            return result;
        }
        else if(nums.size()==1){
            if(nums[0] == target){
                result[0] = 0;
                result[1] = 0;
                return result;
            }
            return result;
        }
        int first = findFirstOccur(nums,target,0,nums.size()-1);
        int last = findLastOccur(nums,target,0,nums.size()-1);
        result[0] = first;
        result[1] = last;

        return result;
    }
};

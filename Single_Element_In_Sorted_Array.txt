int singleNonDuplicate(vector<int>& arr)
{
	int start = 0;
	int end = arr.size()-1;
	if(arr.size()==1)
		return arr[0];
	
	if(arr[0] != arr[1])
		return arr[0];
	
	if(arr[arr.size()-1] != arr[arr.size()-2])
		return arr[arr.size()-1];

	start = 1;
	end = arr.size()-2;
	

	while(start <= end){
		int mid = start + (end-start)/2;
		
		if(arr[mid] != arr[mid-1] && arr[mid] != arr[mid+1])
			return arr[mid];
		
		if(arr[mid] == arr[mid-1]){
			if((mid-1)%2==0){
				start = mid+1;
			}
			else{
				end = mid-1;
			}
		}
		else{
			if(mid%2==1){
				end = mid-1;
			}
			else{
				start = mid+1;
			}
		}
	}
	return -1;
}int singleNonDuplicate(vector<int>& arr)
{
	int start = 0;
	int end = arr.size()-1;

	if(arr.size()==1)
		return arr[0];

	if(arr[0]!=arr[1])
		return arr[0];

	if(arr[arr.size()-1]!=arr[arr.size()-2])
		return arr[arr.size()-1];

	start = 1;
	end = end-1;
	while(start <= end){
		int mid = start + (end-start)/2;
		int leftMid = arr[mid-1];
		int rightMid = arr[mid+1];

		if(leftMid != arr[mid] && rightMid != arr[mid])
			return arr[mid];
		if((mid%2==0 && (arr[mid]== arr[mid+1])) || (mid%2==1 && arr[mid]!=arr[mid+1]))
			start = mid+1;
		else
			end = mid-1;

	}
	return -1;
